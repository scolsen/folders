;; Copyright 2020 Google LLC
;;
;; Licensed under the Apache License, Version 2.0 (the "License");
;; you may not use this file except in compliance with the License.
;; You may obtain a copy of the License at
;;
;;  https://www.apache.org/licenses/LICENSE-2.0
;;
;;  Unless required by applicable law or agreed to in writing, software
;;  distributed under the License is distributed on an "AS IS" BASIS,
;;  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
;;  See the License for the specific language governing permissions and
;;  limitations under the License.

(load "Test.carp")
(load "../folders.carp")
(use-all Test Folders)

(defmodule Array
  (sig empty (Fn [(Array a)] (Empty (Array a))))
  (defn empty [arr]
    (Empty.Of []))
  (defn empty? [arr]
    (= 0 (Array.length &arr)))
  (defn head [arr]
    (Array.unsafe-first &arr))
  (defn tail [arr]
    (let [arr* &arr]
      (if (empty? @arr*)
          (Coproduct.right arr (empty @arr*))
          (Coproduct.left (Array.suffix arr* 1) (empty arr)))))
  (defn member [arr]
    (Product.init @(Array.unsafe-nth &arr 0) (Array.suffix &arr 1)))
)
(eval (implements-all Array head tail empty? empty member))

(deftest test
  (assert-equal test
    (Folders.folder (Folders.Traversal.traverse &+ &Folders.Foldable.each) 0 [1 1 1 1 1] 5 0)
    5
    "folder works as expected")
  (assert-equal test
    (Folders.folder (Folders.Traversal.traverse &+ &Folders.Foldable.each) 0 [1 1 1 1 1] 3 0)
    3
    "folder is delimited")
)
