;; Copyright 2020 Google LLC
;;
;; Licensed under the Apache License, Version 2.0 (the "License");
;; you may not use this file except in compliance with the License.
;; You may obtain a copy of the License at
;;
;;  https://www.apache.org/licenses/LICENSE-2.0
;;
;;  Unless required by applicable law or agreed to in writing, software
;;  distributed under the License is distributed on an "AS IS" BASIS,
;;  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
;;  See the License for the specific language governing permissions and
;;  limitations under the License.

(load-once "dynamic/accumulations.carp")

(defmodule Dynamic
  (defmodule Folders
    (defmodule Unfolds
      (defndynamic nats [start n]
        (reverse (Folders.unfold (Folders.Accumulations.series +) start 1 n)))

      (defndynamic odds-evens [start n]
        (reverse (Folders.unfold (Folders.Accumulations.series +) start 2 n)))
    )
  )
)

;; TODO: It's somewhat prefferable to document our code directly at the declaration.
;; Unfortunately there's currently a bug that causes improper declaration duplication
;; when meta-set is called in the context of a submodule.
(doc Dynamic.Folders.Unfolds
"Predefined unfolds for generating series of values.")

(doc Dynamic.Folders.Unfolds.nats "
Generates a series of natural numbers successors `n` positions from `start`.

```
(nats 0 10)
=> (0 1 2 3 4 5 6 7 8 9 10)
(nats 100 2)
=> (100 101 102)
```")

(doc Dynamic.Folders.Unfolds.odds-evens "
Generates a series of odd natural numbers `n` positions from `start` if
`start` is odd, generates a series of even numbers if `start` is even.

```
(odds-evens 1 3)
=> (1 3 5 7)
(odds-evens 0 3)
=> (0 2 4 6)
```
")
