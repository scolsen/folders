;; Copyright 2020 Google LLC
;;
;; Licensed under the Apache License, Version 2.0 (the "License");
;; you may not use this file except in compliance with the License.
;; You may obtain a copy of the License at
;;
;;  https://www.apache.org/licenses/LICENSE-2.0
;;
;;  Unless required by applicable law or agreed to in writing, software
;;  distributed under the License is distributed on an "AS IS" BASIS,
;;  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
;;  See the License for the specific language governing permissions and
;;  limitations under the License.

(todo "TODO: Clean up this module.")
(doc Recursions
  "")
(defmodule Recursions
  (doc constant-r 
    "")
  (defndynamic constant-r [f constant]
    (fn [s r]
      (Folders.product (f s constant) constant)))
  (doc constant-s 
    "")
  (defndynamic constant-s [f constant]
    (fn [s r]
      (Folders.product constant (f constant r))))

  (defndynamic filter [p]
    (fn [x y]
      (if (p y)
          (append x (list y))
          x)))

 (defndynamic foldl [form]
   (Folders.Recursions.constant-r cons-last form))

 (defndynamic scan [f form]
   (let [accum (fn [s r] (cons (car (f (car s) form)) form))]
     (Folders.Recursions.constant-r accum form)))

 (doc nest 
    "Defines a classical falgebra for catamorphic recursion.

     Example Usage:
 
     ```
     (catamorphism nest '0 '(+ 1) 4)
     ;; => (+ 1 (+ 1 (+ 1 (+ 1 0))))
     ``")
  (defndynamic nest [form]
    (fn [s]
      (cons-last s form)))

    (doc index
       "Traversal that returns the value at a given index of a list, starting
        from 1, or if the value is 0, returns the initial seed value.
        
        Example Usage:

        ```
        (catamorphism index 'a '(b c d e f) 2)
        ;; => c
        ```")
    (defndynamic index [s n]
      (list (car n) (cdr n)))

    (doc tail
      "Traversal that returns the tail of a list.

       Example Usage:

       ```
       (catamorphism tail '() '(a b c d e f) 3)
       ;; => (d e f)
       ```")
    (defndynamic tail [s n]
      (list (cdr n) (cdr n)))

  

  (doc compose 
    "An algebra that expands into composed recursive calls.

     `n` should be a list of nestable forms.

     Example Usage:
     
     ```
     (catamorphism compose '0 '((+ 1) (+ 2)) 2)
     ;; => (+ 1 (+ 2 (+ 1 (+2 0))))
     (catamorphism compose '0 '((+ 1) (+ 2)) 2)
     ;; => 6
     (catamorphism compose ''(c) '((cons (quote b)) (cons (quote a))) 2)
     ;; => (cons (quote b) (cons (quote a) (cons (quote b) (cons (quote a) (quote c)))))
     (eval (catamorphism compose ''(c) '((cons (quote b)) (cons (quote a))) 2))
     ;; => (b a b a c)
     (eval (catamorphism compose '() '((cons (quote b)) (cons (quote a))) 2))
     ;; => (b a b a)
     ```")
  (defndynamic compose [s n]
    (list (cons-last (cons-last s (cadr n)) (car n)) (cons (car n) (cdr n))))

  (doc id 
    "The identity recursion.
     
     Returns the s and n given as input.

     Example Usage:
     ```
     (catamorphism id '0 '(+ 1) 10)
     ;; => 0
     (anamorphism id '0 '(+ 1) 10)
     ;; => (0 0 0 0 0 0 0 0 0 0)
     ```")
  (defndynamic id [s n]
    (list s n))
)
