;; Copyright 2020 Google LLC
;;
;; Licensed under the Apache License, Version 2.0 (the "License");
;; you may not use this file except in compliance with the License.
;; You may obtain a copy of the License at
;;
;;  https://www.apache.org/licenses/LICENSE-2.0
;;
;;  Unless required by applicable law or agreed to in writing, software
;;  distributed under the License is distributed on an "AS IS" BASIS,
;;  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
;;  See the License for the specific language governing permissions and
;;  limitations under the License.

(doc Product
  "A dynamic representation of the Product bifunctor.")
(defmodule Product

  (doc product "
    Takes two valuies, `s` and `r`, into a dynamic product of left and right components.

    ```
    (product 1 2)
    => [1 2]
    ``` ")
  (defndynamic product [s r]
    (array s r))

  (doc left "
    Returns the left component of a product, `p`.

    ```
    (left (product 1 2))
    => 1
    ```
    ")
  (defndynamic left [p]
    (car p))

  (doc right "
    Returns the right component of a product, `p`.

    ```
    (right (product 1 2))
    => 2
    ```
    ")
  (defndynamic right [p]
    (cadr p))

  (doc fork "
    Takes a value, `x`, to a product by calling functions `f` and `g` on `x`
    to yield left and right components.

    ```
    (fork inc dec 2)
    => [3 1]
    ```")
  (defndynamic fork [f g x]
    (Folders.Product.product (f x) (g x)))

  (doc merge "
    Defines a monoid over product components; combines the left and right
    components of a product `p` using `m` to yield a single value.

    ```
    ((merge +) (product 1 2))
    => 3
    ```")
  (defndynamic merge [m]
    (fn [p]
      (m (Folders.Product.left p) (Folders.Product.right p))))

  (doc map "
    Maps two functions `f` and `g` over the left and right components of a product `p`.
  
    ```
    (map inc dec (product 1 2))
    => [2 1]
    ```")
  (defndynamic map [f g p]
    (let [lf (fn [p-] (f (Folders.Product.left p-)))
          rg (fn [p-] (g (Folders.Product.right p-)))]
      (Folders.Product.fork lf rg p)))

  (doc map-l "
    Maps a function `f` over the left component of a product `p`.

    ```
    (map-l inc (product 1 2))
    => [2 2]
    ```
    ")
  (defndynamic map-l [f p]
    (Folders.Product.map f Folders.Prelude.id p))

  (doc map-r "
    Maps a function `f` over the right componenet of a product `p`.

    ```
    (map-r (product 1 2))
    => [1 3]
    ```
    ")
  (defndynamic map-r [f p]
    (Folders.Product.map Folders.Prelude.id f p))
)


